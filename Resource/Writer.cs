using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using XorNet.Collections;
using System.IO;
using XorNet.Rose.Controls;

namespace XorNet.Rose.Resource
{
	class Writer
	{
		public static void SaveHeader(string szFileName, OrderedDictionary<string, int> apps, OrderedDictionary<string, int> ctrls)
		{
			StreamWriter stream = new StreamWriter(szFileName);
			stream.WriteLine("#ifndef __RESOURCE_H");
			stream.WriteLine("#define __RESORUCE_H");
			stream.WriteLine("// Resource Script generated by Rose Interface Designer");
			stream.WriteLine("// Developed by Pain and xLethal");
			stream.WriteLine("// Copyright XorNet");
			stream.WriteLine();
			stream.WriteLine();
			stream.WriteLine("// Applet Id");
			foreach (KeyValuePair<string, int> xPair in apps)
			{
				stream.WriteLine("#define {0}{1}", xPair.Key.PadRight(64, ' '), xPair.Value);
			}
			stream.WriteLine();
			stream.WriteLine("// Control Id");
			foreach (KeyValuePair<string, int> xPair in ctrls)
			{
				stream.WriteLine("#define {0}{1}", xPair.Key.PadRight(64, ' '), xPair.Value);
			}
			stream.WriteLine();
			stream.Write("#endif");
			stream.Close();
		}

		public static void SaveStrings(string szFileName, OrderedDictionary<string, string> strings)
		{
			StreamWriter stream = new StreamWriter(szFileName);
			foreach (KeyValuePair<string, string> xPair in strings)
			{
				stream.WriteLine("{0}\t{1}", xPair.Key, xPair.Value);
			}
			stream.Close();
		}

		public static void SaveProperties(string szFileName, OrderedDictionary<string, int> apps, Dictionary<string, WindowProperty> props)
		{
			ResManager.Instance.Data.Strings.Clear();
			StreamWriter stream = new StreamWriter(szFileName);
			stream.WriteLine("// Resource Script generated by Rose Interface Designer");
			stream.WriteLine("// Developed by Pain and xLethal");
			stream.WriteLine("// Copyright XorNet");
			stream.WriteLine();
			stream.WriteLine();
			foreach (KeyValuePair<string, int> xPair in apps)
			{
				if(!props.Keys.Contains(xPair.Key))
					continue;
				WindowProperty prop = props[xPair.Key];
				stream.WriteLine("{0} \"{1}\" {2} {3} {4} 0x{5:X8} {6}", xPair.Key, prop.m_szTexture, prop.m_bTile, prop.m_size.Width, prop.m_size.Height, (int)prop.m_style, 26);
				stream.WriteLine("{");
				stream.WriteLine("\t" + ResManager.Instance.AddString(prop.m_szTitle));
				stream.WriteLine("}");
				stream.WriteLine("{");
				stream.WriteLine("\t" + ResManager.Instance.AddString(prop.m_szHelp));
				stream.WriteLine("}");
				stream.WriteLine("{");
				foreach (KeyValuePair<string, ControlProperty> ctrlpair in prop.m_aControls)
				{
					ControlProperty ctrlprop = ctrlpair.Value;
					stream.WriteLine("\t{0} {1} \"{2}\" {3} {4} {5} {6} {7} 0x{8:X8} {9} {10} {11} {12}", ctrlprop.m_szType, ctrlprop.m_szID, ctrlprop.m_szTexture, ctrlprop.m_bTile, ctrlprop.m_rectBounds.Left, ctrlprop.m_rectBounds.Top, ctrlprop.m_rectBounds.Right, ctrlprop.m_rectBounds.Bottom, (int)ctrlprop.m_style, ctrlprop.m_bVisible, ctrlprop.m_bGroup, ctrlprop.m_bDisabled, ctrlprop.m_bTabstop);
					stream.WriteLine("\t{");
					stream.WriteLine("\t\t" + ResManager.Instance.AddString(ctrlprop.m_szTitle));
					stream.WriteLine("\t}");
					stream.WriteLine("\t{");
					stream.WriteLine("\t\t" + ResManager.Instance.AddString(ctrlprop.m_szTooltip));
					stream.WriteLine("\t}");
				}
				stream.WriteLine("}");
			}
			stream.Close();
		}
	}
}